{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHRIKRISHNA\\\\Desktop\\\\Roxiler_Task\\\\Client\\\\products\\\\src\\\\Charts\\\\PieChartData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PieChartData = ({\n  categoryCounts,\n  month\n}) => {\n  _s();\n  const chartRef = useRef();\n  useEffect(() => {\n    if (!categoryCounts || Object.keys(categoryCounts).length === 0) {\n      return;\n    }\n\n    // Set up SVG dimensions and radius\n    const width = 400;\n    const height = 400;\n    const radius = Math.min(width, height) / 2;\n\n    // Define color scale\n    const color = d3.scaleOrdinal().range([\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#33FF99\"]);\n\n    // Prepare data in the required format\n    const data = Object.entries(categoryCounts).map(([category, count]) => ({\n      category,\n      count\n    }));\n\n    // Create SVG element\n    const svg = d3.select(chartRef.current).selectAll(\"svg\").data([null]) // Use data([null]) to create only one SVG element\n    .join(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2},${height / 2})`);\n\n    // Define arc function\n    const arc = d3.arc().outerRadius(radius - 10).innerRadius(0);\n\n    // Create pie chart layout\n    const pie = d3.pie().value(d => d.count);\n\n    // Create groups for each pie slice\n    const arcs = svg.selectAll(\"arc\").data(pie(data)).enter().append(\"g\");\n\n    // Draw pie slices\n    arcs.append(\"path\").attr(\"d\", arc).attr(\"fill\", d => color(d.data.category)).attr(\"stroke\", \"#fff\").style(\"stroke-width\", \"2px\");\n\n    // Add labels to pie slices\n    arcs.append(\"text\").attr(\"transform\", d => {\n      const pos = arc.centroid(d);\n      const angle = (d.startAngle + d.endAngle) / 2;\n      const x = pos[0] * 1.4; // Adjust the multiplier for label position\n      const y = pos[1] * 1.4; // Adjust the multiplier for label position\n      return `translate(${x}, ${y})`;\n    }).attr(\"dy\", \"0.35em\").style(\"text-anchor\", \"middle\").text(d => `${d.data.category} (${((d.endAngle - d.startAngle) / (2 * Math.PI) * 100).toFixed(2)}%)`);\n  }, [categoryCounts]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Categories Pie Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"(\", month, \" Month)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(PieChartData, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = PieChartData;\nexport default PieChartData;\nvar _c;\n$RefreshReg$(_c, \"PieChartData\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","PieChartData","categoryCounts","month","_s","chartRef","Object","keys","length","width","height","radius","Math","min","color","scaleOrdinal","range","data","entries","map","category","count","svg","select","current","selectAll","join","attr","append","arc","outerRadius","innerRadius","pie","value","d","arcs","enter","style","pos","centroid","angle","startAngle","endAngle","x","y","text","PI","toFixed","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/SHRIKRISHNA/Desktop/Roxiler_Task/Client/products/src/Charts/PieChartData.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst PieChartData = ({ categoryCounts, month }) => {\r\n  const chartRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!categoryCounts || Object.keys(categoryCounts).length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Set up SVG dimensions and radius\r\n    const width = 400;\r\n    const height = 400;\r\n    const radius = Math.min(width, height) / 2;\r\n\r\n    // Define color scale\r\n    const color = d3\r\n      .scaleOrdinal()\r\n      .range([\"#FF6384\", \"#36A2EB\", \"#FFCE56\", \"#33FF99\"]);\r\n\r\n    // Prepare data in the required format\r\n    const data = Object.entries(categoryCounts).map(([category, count]) => ({\r\n      category,\r\n      count,\r\n    }));\r\n\r\n    // Create SVG element\r\n    const svg = d3\r\n      .select(chartRef.current)\r\n      .selectAll(\"svg\")\r\n      .data([null]) // Use data([null]) to create only one SVG element\r\n      .join(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .append(\"g\")\r\n      .attr(\"transform\", `translate(${width / 2},${height / 2})`);\r\n\r\n    // Define arc function\r\n    const arc = d3\r\n      .arc()\r\n      .outerRadius(radius - 10)\r\n      .innerRadius(0);\r\n\r\n    // Create pie chart layout\r\n    const pie = d3.pie().value((d) => d.count);\r\n\r\n    // Create groups for each pie slice\r\n    const arcs = svg.selectAll(\"arc\").data(pie(data)).enter().append(\"g\");\r\n\r\n    // Draw pie slices\r\n    arcs\r\n      .append(\"path\")\r\n      .attr(\"d\", arc)\r\n      .attr(\"fill\", (d) => color(d.data.category))\r\n      .attr(\"stroke\", \"#fff\")\r\n      .style(\"stroke-width\", \"2px\");\r\n\r\n    // Add labels to pie slices\r\n    arcs\r\n      .append(\"text\")\r\n      .attr(\"transform\", (d) => {\r\n        const pos = arc.centroid(d);\r\n        const angle = (d.startAngle + d.endAngle) / 2;\r\n        const x = pos[0] * 1.4; // Adjust the multiplier for label position\r\n        const y = pos[1] * 1.4; // Adjust the multiplier for label position\r\n        return `translate(${x}, ${y})`;\r\n      })\r\n      .attr(\"dy\", \"0.35em\")\r\n      .style(\"text-anchor\", \"middle\")\r\n      .text(\r\n        (d) =>\r\n          `${d.data.category} (${(\r\n            ((d.endAngle - d.startAngle) / (2 * Math.PI)) *\r\n            100\r\n          ).toFixed(2)}%)`\r\n      );\r\n  }, [categoryCounts]);\r\n\r\n  return (\r\n    <>\r\n      <h3>Categories Pie Chart</h3>\r\n      <h1>({month} Month)</h1>\r\n      <div ref={chartRef}></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PieChartData;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}